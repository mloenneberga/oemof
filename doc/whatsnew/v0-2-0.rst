v0.2.0 ()
++++++++++++++++++++++++++


API changes
###########

* Rename `NodesFromCSV` function to `nodes_from_csv`
* Replace LinearTransformer and LinearN1Transformer classes with one
  Transformer class. The new class has n inputs and n outputs. Please note that
  the definition of the conversion factors has changed. See the new docstring
  to avoid errors (`Issue #351 <https://github.com/oemof/oemof/issues/351>`_).
* Rename OperationalModel to Model
* :class:`Nodes <oemof.network.Node>` are no longer automatically added to the
  most recently created :class:`energy system
  <oemof.energy_system.EnergySystem>`. You can still restore the old automatic
  registration by manually assigning an :class:`energy system
  <oemof.energy_system.EnergySystem>` to :attr:`Node.registry
  <oemof.network.Node.registry>`. On the other hand you can still explicitly
  :meth:`add <oemof.energy_system.EnergySystem.add>` :class:`nodes
  <oemof.network.Node>` to an :class:`energy system
  <oemof.energy_system.EnergySystem>`. This option has been made a bit more
  feature rich by the way, but see below for more on this.

New features
############

* Add new outputlib module to analyse and and plot optimization results.
  All decision variables of a Node are now collected automatically which
  enables an easier development of custom components within the oemof logic.
  See examples for usage!
* A new component `GenericCHP` allows an accurate modelling of different CHP
  types including combined-cycle plant.
* Add an outputlib module to draw and plot energy system graphs using networkx.
* Sort columns of result dataframe lexicographically.
* It's now possible to modify a :class:`node <oemof.network.Node>`'s
  :attr:`inputs <oemof.network.Node.inputs>` and `outputs
  <oemof.network.Node.outputs>` by inserting and removing :class:`node
  <oemof.network.Node>`s to and from the correspoding dictionaries.
  :attr:`Outputs <oemof.network.Node.outputs>` where already working
  previously, but due to an implementation quirk, :attr:`inputs
  <oemof.network.Node.inputs>` did not behave as expected. This is now fixed.
* You can now explicitly :meth:`add <oemof.energy_system.EnergySystem.add>`
  :class:`nodes <oemof.network.Node>` to an :class:`energy system
  <oemof.energy_system.EnergySystem>` in bulk using `*` and `**` syntax. For
  the latter case, the :meth:`values <dict.values>` of the dictionary passed in
  will be added.


Documentation
#############

* Proofread (`issue #320 <https://github.com/oemof/oemof_base/issues/320>`_)

Bug fixes
#########

* LP-file tests are now invariant against sign changes in equations, because
  the equations are now normalized to always have non-negative right hand
  sides.

Testing
#######


Other changes
#############



Contributors
############

* Cord Kaldemeyer
* Stephan GÃ¼nther
* Simon Hilpert
* Uwe Krien
* Jens-Olaf Delfs
